package com.zwyue.behavior.visitor;

/**
 * 行为型设计模式，访问者模式
 *
 * 访问者模式英文是 Visitor Design Pattern
 *
 * 在 GoF 的《设计模式》一书中，它是这么定义的：
 *  Allows for one or more operation to be applied to a set of objects at runtime,
 *  decoupling the operations from the object structure.
 *
 *  允许一个或者多个操作应用到一组对象上，解耦操作和对象本身。
 *
 * 一般来说，访问者模式针对的是一组类型不同的对象。
 * 不过，尽管这组对象的类型是不同的，但是，它们继承相同的父类或者实现相同的接口。
 * 在不同的应用场景下，我们需要对这组对象进行一系列不相关的业务操作，
 * 但为了避免不断添加功能导致类不断膨胀，职责越来越不单一，
 * 以及避免频繁地添加功能导致的频繁代码修改，我们使用访问者模式，
 * 将对象与操作解耦，将这些业务操作抽离出来，定义在独立细分的访问者类中。
 *
 * 支持双分派的语言不需要访问者模式
 *
 * Java 支持多态特性，代码可以在运行时获得对象的实际类型（也就是前面提到的运行时类型），然后根据实际类型决定调用哪个方法。
 * 尽管 Java 支持函数重载，但 Java 设计的函数重载的语法规则是，并不是在运行时根据传递进函数的参数的实际类型来决定调用哪个重载函数，
 * 而是在编译时，根据传递进函数的参数的声明类型（也就是编译时类型），来决定调用哪个重载函数。
 * 也就是说，具体执行哪个对象的哪个方法，只跟对象的运行时类型有关，跟参数的运行时类型无关。所以，Java 语言只支持 Single Dispatch。
 *
 * 访问者模式难以理解，应用场景有限，不是特别必需，不建议在项目中使用它，更推荐使用工厂模式来设计和实现。
 */