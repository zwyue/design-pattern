package com.zrtjoa.service.impl;

import com.zrtjoa.common.ResultUtils;
import com.zrtjoa.dao.ClassesDao;
import com.zrtjoa.dao.RosterDao;
import com.zrtjoa.dao.StudentDao;
import com.zrtjoa.dao.StudentEnterDao;
import com.zrtjoa.entity.*;
import com.zrtjoa.service.StudentService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.TransactionCallback;
import org.springframework.transaction.support.TransactionTemplate;

import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

import static com.zrtjoa.common.TimeUtil.calculateAge;
import static com.zrtjoa.constant.SysConstant.Punctuation.COMMA;

/**
 * @Author: yangli
 * @Description:
 * @Date: Created in 11:38 2018/12/21
 * @Modified by:
 */
@Service
public class StudentServiceImpl implements StudentService {

    @Autowired
    private StudentDao studentDao;

    @Override
    public int deleteByPrimaryKey(Integer id) {
        return studentDao.deleteByPrimaryKey(id);
    }

    @Override
    public int insert(Student record) {
        return studentDao.insert(record);
    }

    @Override
    public int insertSelective(Student record) {
        return studentDao.insertSelective(record);
    }

    @Override
    public Student selectByPrimaryKey(Integer id) {
        return studentDao.selectByPrimaryKey(id);
    }

    @Override
    public int updateByPrimaryKeySelective(Student record) {
        return studentDao.updateByPrimaryKeySelective(record);
    }

    @Override
    public int updateByPrimaryKey(Student record) {
        return studentDao.updateByPrimaryKey(record);
    }

    @Override
    public List<Student> getStudentList() {
        return studentDao.getStudentList();
    }

    /**
     * copyright    <a href="http://www.qaqavr.com/>中锐</a>
     * <pre>
     *     author        zwy
     *     @date        2018/12/21 9:26
     *     email        1092478224@qq.com
     *     desc         学生管理
     * </pre>
     */

    private final static Logger logger = LoggerFactory.getLogger(StudentServiceImpl.class);

    /**
     * 报名信息表
     *
     * @date 2018/12/24 17:15
     */
    @Autowired
    private StudentEnterDao studentEnterDao ;

    /**
     * 学生花名册表
     *
     * @date 2018/12/24 17:16
     */
    @Autowired
    private RosterDao rosterDao ;

    @Autowired
    private TransactionTemplate transactionTemplate ;

    @Autowired
    private RedisTemplate redisTemplate ;

    @Autowired
    private ClassesDao classesDao ;

    /**
     * 学生信息录入
     *
     *  todo - 校验报名班级时间是否冲突
     *
     * @author zwy
     * @date 2018/12/21 9:28
     */
    @Override
    public Map enterStudentInfo(Student student, StudentEnter studentEnter) {
        //查询学生是否存在
        Student existStudent = studentDao.queryStudentByIdCard(student.getSfzh());

        if(existStudent!=null){
           //查询是否重复报名，即所报班级中是否已存在该学生id
           //可以报同一专业的不同班级
           Map map = new HashMap();
           map.put("classids", Arrays.asList(studentEnter.getClassid().split(COMMA)));
           map.put("stuid",existStudent.getId());
           List<Roster> existRoster = rosterDao.queryRosterInfoByClsIdAndStuId(map);
           if(existRoster.size()!=0){
               logger.error("........该生已注册过其中{}门课程........",existRoster.size());
               return ResultUtils.error("") ;
           }
        }

        //报名几个班
        List<String> classIds = Arrays.asList(studentEnter.getClassid().split(COMMA));

        //缓存中的专业信息
        List<Profession> professions = (List<Profession>) redisTemplate.opsForValue().get("professions");

        Map<String,String> map = new HashMap();

        classIds.forEach(cls->{
            //查询分类、专业编号
            Classes classes = classesDao.selectByPrimaryKey(Integer.parseInt(cls));
            professions.forEach(p -> {
                if(p.getId().equals(classes.getMajorid())){
                    //对于一个专业来说，只会有一个分类id吧？不管了，这里我只当成一个来写
                    String prefixNo = LocalDate.now().getYear() + p.getNumbers() + p.getMajornumber() ;

                    List stuNos = (List) redisTemplate.opsForValue().get(prefixNo);

                    String lastNo = "01" ;

                    if(stuNos.size()!=0){
                        lastNo =(String) stuNos.get(0);
                        int no = Integer.parseInt(lastNo) + 1 ;
                        lastNo = no/10 == 0?"0"+no:""+no ;
                    }
                    //学号为key,类别名加专业名为value
                    map.put(prefixNo+lastNo,classes.getClassname());
                }
            });
        });

        Roster roster = new Roster();
        roster.setStuname(student.getStuname());
        roster.setBirthdate(student.getSfzh().substring(5,19));
        roster.setAge(calculateAge(student.getSfzh().substring(5,19)));

        return transactionTemplate.execute(new TransactionCallback<Map>() {
            @Override
            public Map doInTransaction(TransactionStatus status) {


                if(existStudent==null){
                    //插入学生信息
                    int id = studentDao.insert(student);
                    studentEnter.setStuid(id);
                    //插入学生报名信息
                    studentEnterDao.insert(studentEnter);
                    //设置花名册学生id
                    roster.setStuid(id);
                }else {
                    student.setId(existStudent.getId());
                    //更新学生信息(学号覆盖)
                    studentDao.updateByPrimaryKeySelective(student);
                    studentEnter.setStuid(existStudent.getId());
                    //更新学生报名信息（学号覆盖）
                    studentEnterDao.updateByPrimaryKey(studentEnter);
                    //更新花名册学生id
                    roster.setStuid(existStudent.getId());
                }

                //插入花名册
                map.keySet().forEach(key->{
                    roster.setStunumber(key);
                    roster.setClassname(map.get(key));
                    rosterDao.insert(roster);
                    //更新缓存
                    String no = key.substring(0,10) ;
                    List classifyNos = (List) redisTemplate.opsForValue().get(no);
                    classifyNos.add(key.substring(10,2));
                    List sortList = (List) classifyNos.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());
                    redisTemplate.opsForValue().set(key,sortList);
                });
                return null;
            }
        });
    }

    @Override
    public List<Student> queryAllStudents() {
        return studentDao.queryAllStudents();
    }
}
